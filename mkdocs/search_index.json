{
    "docs": [
        {
            "location": "/", 
            "text": "Biblioteca de Conte\u00fados para a Capacita\u00e7\u00e3o de Colaboradores da Net On\n#\n\n\nObjetivo\n#\n\n\nO objetivo deste documento \u00e9 agrupar materiais de estudo de assuntos necess\u00e1rios para a capacita\u00e7\u00e3o dos colaboradores\nda Net On.\n\n\n\u00cdndice de assuntos\n#\n\n\n\n\n\n\n\n\nGuia\n\n\nAssuntos\n\n\nInteressados\n\n\n\n\n\n\n\n\n\n\nGuia para o gerenciamento de Projetos\n\n\nGerenciamento de Projetos\n\n\nGerente de Projeto\n\n\n\n\n\n\nPSR - PHP Standard Recomendations\n\n\nPrograma\u00e7\u00e3o, PHP\n\n\nAnalista de Sistemas, Programador", 
            "title": "Introdu\u00e7\u00e3o"
        }, 
        {
            "location": "/#biblioteca-de-conteudos-para-a-capacitacao-de-colaboradores-da-net-on", 
            "text": "", 
            "title": "Biblioteca de Conte\u00fados para a Capacita\u00e7\u00e3o de Colaboradores da Net On"
        }, 
        {
            "location": "/#objetivo", 
            "text": "O objetivo deste documento \u00e9 agrupar materiais de estudo de assuntos necess\u00e1rios para a capacita\u00e7\u00e3o dos colaboradores\nda Net On.", 
            "title": "Objetivo"
        }, 
        {
            "location": "/#indice-de-assuntos", 
            "text": "Guia  Assuntos  Interessados      Guia para o gerenciamento de Projetos  Gerenciamento de Projetos  Gerente de Projeto    PSR - PHP Standard Recomendations  Programa\u00e7\u00e3o, PHP  Analista de Sistemas, Programador", 
            "title": "\u00cdndice de assuntos"
        }, 
        {
            "location": "/guideprojectplanning/guide/", 
            "text": "Guia para Gerenciamento de Projetos\n#\n\n\n1. Sendo \u00e1gil\n#\n\n\nProcessos s\u00e3o tediosos como o inferno, mas se voc\u00ea n\u00e3o defin\u00ed-los bem, voc\u00ea ir\u00e1 desperdi\u00e7ar o seu tempo,\nperder deadlines, estourar or\u00e7amentos, enfurecer seus clientes, e nunca trabalhar novamente.\nFelizmente a maioria dos projetos digitais n\u00e3o requer processos elaborados. Simplesmente quebrar o trabalho em\npartes menores e rastrear o progresso \u00e9 tudo o que voc\u00ea precisa para alcan\u00e7ar um projeto de sucesso.\n\n\n1.1 Gerenciamento de projetos Cl\u00e1ssico vs Moderno\n#\n\n\nGerenciamento de projetos \u00e9 uma profiss\u00e3o muito antiga. Sen\u00e3o fosse assim, como os eg\u00edpicios poderiam construir\nas pir\u00e2medes se n\u00e3o houvesse um processo para gerenciar o trabalho?\n\n\nMas o gerenciamento de projetos n\u00e3o era visto como uma ci\u00eancia at\u00e9 1950. Foi quando as pessoas come\u00e7aram a escrever\nlivros sobre como organizar projetos e sistematicamente desenvolver e aplicar t\u00e9cnicas. Esses livros eram focados\nem projetos realmente complexos como construir um sistema de navega\u00e7\u00e3o para um m\u00edssil ou uma planta de usina el\u00e9trica -\nnada que voc\u00ea possa fazer em um m\u00eas ou um ano.\n\n\nPor isso a maioria das t\u00e9cnicas e frameworks pensados em universidades e escolas de neg\u00f3cio s\u00e3o realmente complexas\n(ex. PRINCE2, CPM, PERT, CPM). Mas eles n\u00e3o s\u00e3o feitos para voc\u00ea, porque eles falham quando se trata de projetos digitais\ncomo  construir um site, criar uma aplica\u00e7\u00e3o ou planjejar uma campanha de marketing.\n\n\nPor que eles n\u00e3o s\u00e3o ideais pra voc\u00ea? Porque produtos digitais s\u00e3o male\u00e1veis: eles podem facilmente ser mudados, ajustados,\ne melhorados.\n\n\nPor exemplo, uma vez que voc\u00ea constru\u00edu uma ponte, ela est\u00e1 pronta. Voc\u00ea n\u00e3o pode voltar atr\u00e1s, refatorar, melhorar\nincrementalmente, corrigir um erro, ou pivotar e mudar tudo. Voc\u00ea precisa planejar muito bem tudo \u00e0 frente, porque o\ncusto de fazer tudo de novo pode ser maior que o do projeto original.\n\n\nReprojetar um website, ou reescrever uma aplica\u00e7\u00e3o do zero tamb\u00e9m pode custar, mas n\u00e3o tanto quanto derrubar uma ponte\ne reconstru\u00ed-la. Al\u00e9m do mais, c\u00f3digo e projeto nunca est\u00e3o realmente finalizados. N\u00f3s precisamos atualizar e melhorar\nwebsites e aplica\u00e7\u00f5es dia ap\u00f3s dia apenas para mant\u00ea-los atualizados com as \u00faltimas tecnologias e tend\u00eancias.\n\n\n\n\n1.2 Como o \u00c1gil ajuda os projetos digitais\n#\n\n\nO sol nascel: projetos grandes, de miss\u00e3o cr\u00edtica necessitam de grandes e complexos frameworks. Projetos digitais\npor outro lado precisam apenas de princ\u00edpios flex\u00edveis e uma ou duas ferramentas.\n\n\nOs princ\u00edpios que s\u00e3o mais adequados para projetos digitais s\u00e3o resumidos no manifesto \u00e1gil de 2001. Eles s\u00e3o:\n\n\n\n\nIndiv\u00edduos e intera\u00e7\u00f5es sobre processos e ferramentas;\n\n\nSoftware funcionando sobre documenta\u00e7\u00e3o compreensiva;\n\n\nColabora\u00e7\u00e3o com o cliente sobre negocia\u00e7\u00e3o de contrato;\n\n\nResponder a mudan\u00e7as sobre seguir um plano;\n\n\n\n\n\n\nPreste aten\u00e7\u00e3o especial na parte \nsobre\n - ela basicamente diz:\n\n\n\"N\u00e3o se incomde com o planejamento, alguma coisa sempre ir\u00e1 mudar de qualquer jeito. A melhor coisa que voc\u00ea pode fazer\n \u00e9 ouvir seus clientes / usu\u00e1rios, ver como eles usam o produto, e interagir at\u00e9 que eles estejam satisfeitos.\"\n\n\n\n\nIsso \u00e9 tudo que \u00e9 ser \u00e1gil. Especialistas e consultores vendem metodologias de mercado que eles desenvolveram (como SCRUM,\nSAFe, RAD, RUP, etc) que seguem os mesmos princ\u00edpios. Mas eles s\u00e3o um exagero para empresas menores e sua complexidade\nvai contra o n\u00facleo dos princ\u00edpios \u00e1geis.\n\n\nTodas as metodologias \u00e1geis pressup\u00f5e que os projetos mudam. Algumas d\u00e3o a voc\u00ea apontadores gen\u00e9ricos sobre o que deve ser\no objetivo (Lean), algumas d\u00e3o a voc\u00ea ferramentas completas (Kanbam), e algumas s\u00e3o uma parte espec\u00edfica de prescri\u00e7\u00f5es\npara um fluxo completo (Scrum).\n\n\n\n\n2. Gerente de projetos\n#\n\n\n\n\n3. Planejamento de projetos\n#\n\n\n\n\n4. Monitorando projeto\n#", 
            "title": "Guia para Gerenciamento de projetos"
        }, 
        {
            "location": "/guideprojectplanning/guide/#guia-para-gerenciamento-de-projetos", 
            "text": "", 
            "title": "Guia para Gerenciamento de Projetos"
        }, 
        {
            "location": "/guideprojectplanning/guide/#1-sendo-agil", 
            "text": "Processos s\u00e3o tediosos como o inferno, mas se voc\u00ea n\u00e3o defin\u00ed-los bem, voc\u00ea ir\u00e1 desperdi\u00e7ar o seu tempo,\nperder deadlines, estourar or\u00e7amentos, enfurecer seus clientes, e nunca trabalhar novamente.\nFelizmente a maioria dos projetos digitais n\u00e3o requer processos elaborados. Simplesmente quebrar o trabalho em\npartes menores e rastrear o progresso \u00e9 tudo o que voc\u00ea precisa para alcan\u00e7ar um projeto de sucesso.", 
            "title": "1. Sendo \u00e1gil"
        }, 
        {
            "location": "/guideprojectplanning/guide/#11-gerenciamento-de-projetos-classico-vs-moderno", 
            "text": "Gerenciamento de projetos \u00e9 uma profiss\u00e3o muito antiga. Sen\u00e3o fosse assim, como os eg\u00edpicios poderiam construir\nas pir\u00e2medes se n\u00e3o houvesse um processo para gerenciar o trabalho?  Mas o gerenciamento de projetos n\u00e3o era visto como uma ci\u00eancia at\u00e9 1950. Foi quando as pessoas come\u00e7aram a escrever\nlivros sobre como organizar projetos e sistematicamente desenvolver e aplicar t\u00e9cnicas. Esses livros eram focados\nem projetos realmente complexos como construir um sistema de navega\u00e7\u00e3o para um m\u00edssil ou uma planta de usina el\u00e9trica -\nnada que voc\u00ea possa fazer em um m\u00eas ou um ano.  Por isso a maioria das t\u00e9cnicas e frameworks pensados em universidades e escolas de neg\u00f3cio s\u00e3o realmente complexas\n(ex. PRINCE2, CPM, PERT, CPM). Mas eles n\u00e3o s\u00e3o feitos para voc\u00ea, porque eles falham quando se trata de projetos digitais\ncomo  construir um site, criar uma aplica\u00e7\u00e3o ou planjejar uma campanha de marketing.  Por que eles n\u00e3o s\u00e3o ideais pra voc\u00ea? Porque produtos digitais s\u00e3o male\u00e1veis: eles podem facilmente ser mudados, ajustados,\ne melhorados.  Por exemplo, uma vez que voc\u00ea constru\u00edu uma ponte, ela est\u00e1 pronta. Voc\u00ea n\u00e3o pode voltar atr\u00e1s, refatorar, melhorar\nincrementalmente, corrigir um erro, ou pivotar e mudar tudo. Voc\u00ea precisa planejar muito bem tudo \u00e0 frente, porque o\ncusto de fazer tudo de novo pode ser maior que o do projeto original.  Reprojetar um website, ou reescrever uma aplica\u00e7\u00e3o do zero tamb\u00e9m pode custar, mas n\u00e3o tanto quanto derrubar uma ponte\ne reconstru\u00ed-la. Al\u00e9m do mais, c\u00f3digo e projeto nunca est\u00e3o realmente finalizados. N\u00f3s precisamos atualizar e melhorar\nwebsites e aplica\u00e7\u00f5es dia ap\u00f3s dia apenas para mant\u00ea-los atualizados com as \u00faltimas tecnologias e tend\u00eancias.", 
            "title": "1.1 Gerenciamento de projetos Cl\u00e1ssico vs Moderno"
        }, 
        {
            "location": "/guideprojectplanning/guide/#12-como-o-agil-ajuda-os-projetos-digitais", 
            "text": "O sol nascel: projetos grandes, de miss\u00e3o cr\u00edtica necessitam de grandes e complexos frameworks. Projetos digitais\npor outro lado precisam apenas de princ\u00edpios flex\u00edveis e uma ou duas ferramentas.  Os princ\u00edpios que s\u00e3o mais adequados para projetos digitais s\u00e3o resumidos no manifesto \u00e1gil de 2001. Eles s\u00e3o:   Indiv\u00edduos e intera\u00e7\u00f5es sobre processos e ferramentas;  Software funcionando sobre documenta\u00e7\u00e3o compreensiva;  Colabora\u00e7\u00e3o com o cliente sobre negocia\u00e7\u00e3o de contrato;  Responder a mudan\u00e7as sobre seguir um plano;    Preste aten\u00e7\u00e3o especial na parte  sobre  - ela basicamente diz:  \"N\u00e3o se incomde com o planejamento, alguma coisa sempre ir\u00e1 mudar de qualquer jeito. A melhor coisa que voc\u00ea pode fazer\n \u00e9 ouvir seus clientes / usu\u00e1rios, ver como eles usam o produto, e interagir at\u00e9 que eles estejam satisfeitos.\"   Isso \u00e9 tudo que \u00e9 ser \u00e1gil. Especialistas e consultores vendem metodologias de mercado que eles desenvolveram (como SCRUM,\nSAFe, RAD, RUP, etc) que seguem os mesmos princ\u00edpios. Mas eles s\u00e3o um exagero para empresas menores e sua complexidade\nvai contra o n\u00facleo dos princ\u00edpios \u00e1geis.  Todas as metodologias \u00e1geis pressup\u00f5e que os projetos mudam. Algumas d\u00e3o a voc\u00ea apontadores gen\u00e9ricos sobre o que deve ser\no objetivo (Lean), algumas d\u00e3o a voc\u00ea ferramentas completas (Kanbam), e algumas s\u00e3o uma parte espec\u00edfica de prescri\u00e7\u00f5es\npara um fluxo completo (Scrum).", 
            "title": "1.2 Como o \u00c1gil ajuda os projetos digitais"
        }, 
        {
            "location": "/guideprojectplanning/guide/#2-gerente-de-projetos", 
            "text": "", 
            "title": "2. Gerente de projetos"
        }, 
        {
            "location": "/guideprojectplanning/guide/#3-planejamento-de-projetos", 
            "text": "", 
            "title": "3. Planejamento de projetos"
        }, 
        {
            "location": "/guideprojectplanning/guide/#4-monitorando-projeto", 
            "text": "", 
            "title": "4. Monitorando projeto"
        }, 
        {
            "location": "/psr/psr/", 
            "text": "PSR - PHP Standard Recomendations\n#\n\n\nPSR 1 - Padr\u00e3o de codifica\u00e7\u00e3o B\u00e1sico\n#\n\n\nEsta se\u00e7\u00e3o do padr\u00e3o compreende o que deve ser considerado padr\u00e3o de elementos de c\u00f3digo que\ns\u00e3o necess\u00e1rios para garantir um alto n\u00edvel de interoperabilidade t\u00e9cnica entre c\u00f3digo PHP\ncompartilhado.\n\n\n1. VIS\u00c3O GERAL\n#\n\n\n\n\n\n\nArquivos \nDEVEM\n usar apenas tags \n?php\n e \n?=\n;\n\n\n\n\n\n\nArquivos \nDEVEM\n usar apenas \nUTF-8\n sem \nBOM\n para o c\u00f3digo PHP;\n\n\n\n\n\n\nArquivos \nDEVERIAM\n declarar ou s\u00edmbolos (classes, fun\u00e7\u00f5es, constantes, etc) ou causar efeitos\ncolaterais (ex. gerar sa\u00edda, modificar confirma\u00e7\u00f5es do php.ini, etc) mas \nN\u00c3O DEVERIAM\n fazer\nambos;\n\n\n\n\n\n\nNamespaces e classes \nDEVEM\n seguir o padr\u00e3o de autoloading [PSR4];\n\n\n\n\n\n\nNomes de classes \nDEVEM\n ser declarados em \nStudlyCaps\n;\n\n\n\n\n\n\n    // nome de classe v\u00e1lido\n    class ActiveDirectory\n    {\n    }\n\n    // nome de classe inv\u00e1lido\n    class activeDirectory\n    {\n    }\n\n    // nome de classe inv\u00e1lido\n    class Active_Directory\n    {\n    }\n\n\n\n\n\n\nConstantes de classes \nDEVEM\n ser declaradas em \nupper case\n com separadores \nunderscore\n;\n\n\n\n\n    class ActiveDirectory\n    {\n        // constante v\u00e1lida\n        const SERVER_ADDRESS = '192.168.0.1';\n\n        // constante inv\u00e1lida\n        const serverAddress = '...';\n\n        // constante inv\u00e1lida\n        const server_address = '...';\n    }\n\n\n\n\n\n\nNomes de m\u00e9todos devem ser declarados em \ncamelCase\n;\n\n\n\n\n    class ActiveDirectory\n    {\n        // nome de m\u00e9todo v\u00e1lido\n        public function connectAgain(){}\n\n        // nome de m\u00e9todo inv\u00e1lido\n        public function ConnectAgain(){}\n\n        // nome de m\u00e9todo inv\u00e1lido\n        public function Connect_Again(){}\n    }\n\n\n\n\n2. ARQUIVOS\n#\n\n\n2.1 Tags PHP\n#\n\n\nC\u00f3digo PHP \nDEVE\n usar tags completas \n?php ?\n ou as tags simplificadas \n?= ?\n; ele\n\nN\u00c3O DEVE\n usar outras varia\u00e7\u00f5es de tags.\n\n\n2.2 Codifica\u00e7\u00e3o de caracteres\n#\n\n\nC\u00f3digo PHP \nDEVE\n usar apenas caracteres \nUTF-8\n sem \nBOM\n.\n\n\n2.3 Efeitos Colaterais\n#\n\n\nUm arquivo \nDEVERIA\n declarar novos s\u00edmbolos (classes, fun\u00e7\u00f5es, constantes, etc.) e n\u00e3o causar\noutro efeito colateral, ou ele \nDEVERIA\n executar l\u00f3gica com efeitos colaterais, mas\n\nN\u00c3O DEVERIA\n realizar ambos.\n\n\nA frase \n\"efeitos colaterais\"\n significa a execu\u00e7\u00e3o de l\u00f3gica n\u00e3o diretamente relacionada \u00e0\ndeclara\u00e7\u00e3o de classes, fun\u00e7\u00f5es, constantes, etc., meramente a partir da inclus\u00e3o do arquivo.\n\n\n\"Efeitos colaterais\"\n incluem mas n\u00e3o se limitam h\u00e1: gerar sa\u00edda, explicitamente usar \ninclude\n\nou \nrequire\n, conectar a servi\u00e7os externos, modificar configura\u00e7\u00f5es do \nphp.ini\n, emitir erros\nou exce\u00e7\u00f5es, modificar vari\u00e1veis est\u00e1ticas ou globais, ler ou escrever em um arquivo, etc.\n\n\nOs seguintes exemplos mostram um arquivo com ambas as declare\u00e7\u00f5es e efeitos colaterais; i.e, um\nexemplo do que evitar:\n\n\n    // efeito colateral: modificar configura\u00e7\u00f5es do php.ini\n    ini_set('error_reporting', E_ALL);\n\n    // efeito colateral: carregar um arquivo\n    include \nfile.php\n;\n\n    // efeito colateral: gerar uma sa\u00edda\n    echo \nhtml\n\\n\n;\n\n    // declara\u00e7\u00e3o\n    function foo()\n    {\n        // corpo da fun\u00e7\u00e3o\n    }\n\n\n\n\nA seguir um exemplo de um arquivo que cont\u00e9m declara\u00e7\u00f5es sem efeitos colaterais; i.e., um exemplo\ndo que fazer:\n\n\n?php\n// declara\u00e7\u00e3o\nfunction foo()\n{\n    // corpo da fun\u00e7\u00e3o\n}\n\n// declara\u00e7\u00e3o condicional *n\u00e3o* \u00e9 efeito lateral\nif (! function_exists('bar')) {\n\n    function bar()\n    {\n        // corpo da fun\u00e7\u00e3o\n    }\n}\n\n\n\n\n3. Namespace e nomes de classes\n#\n\n\nNamespaces e classes \nDEVEM\n seguir um padr\u00e3o de autoloading PSR: [PSR-0, PSR-4].\n\n\nIsto siginifica que cada classe est\u00e1 em um arquivo pr\u00f3prio, e est\u00e1 num namespace de ao menos um\nn\u00edvel: o n\u00edvel superior do nome do distribuidor.\n\n\nNomes de classes \nDEVEM\n ser declarados no formato \nStudlyCaps\n.\n\n\nC\u00f3digos escritos para PHP 5.3 e superior \nDEVEM\n usar namespaces formais.\n\n\nPor exemplo:\n\n\n?php\n// PHP 5.3 ou superior\nnamespace Vendor\\Model;\n\nClass Foo\n{\n\n}\n\n\n\n\nC\u00f3digos escritos para PHP 5.2.x e anterior \nDEVERIAM\n usar uma conven\u00e7\u00e3o de de pseudo-namespaces\nde \n\"Vendor_\"\n nos nomes das classes:\n\n\n?php\n// PHP 5.2.x ou anterior\nclass Vendor_Model_Foo\n{\n\n}\n\n\n\n\n4. Constantes de classes, Propriedades e M\u00e9todos\n#\n\n\nO Termo \"classe\" se refere a todas as classes, interfaces e tra\u00e7os.\n\n\n4.1 Constantes\n#\n\n\nConstantes de classes \nDEVEM\n ser declaradas todas em \nUPPER CASE\n com separadores underscore.\nPor exemplo:\n\n\n?php\n\nnamespace Vendor\\Model;\n\nclass Foo\n{\n    const VERSION = '1.0';\n    const DATE_APPROVED = '2012-06-01';\n}\n\n\n\n\n4.2 Propriedades\n#\n\n\nEste guia intencionamento evita qualquer recomenda\u00e7\u00e3o a cerca do uso de nomes de propriedades\n\n$StudlyCaps\n, \n$camelCase\n, ou \n$under_score\n.\n\n\nQualquer conven\u00e7\u00e3o de nome que for usada \nDEVERIA\n ser aplicada consistentemente dentro de um\nescopo razo\u00e1vel. Este escopo pode ser o n\u00edvel do distribuidor, o n\u00edvel do pacote, o n\u00edvel da classe,\nou o escopo do m\u00e9todo.\n\n\n4.3 M\u00e9todos\n#\n\n\nNomes de m\u00e9todos \nDEVEM\n ser declarados em \ncamelCase()\n.\n\n\nPSR 2 - Guia de Estilo de Codifica\u00e7\u00e3o\n#\n\n\nPSR 3 - Interface de Log\n#\n\n\nPSR 4 - Padr\u00e3o de autocarregamento\n#\n\n\nPSR 6 - Inteface de Cache\n#\n\n\nPSR 7 - Inteface de mensagem HTTP\n#", 
            "title": "PSR"
        }, 
        {
            "location": "/psr/psr/#psr-php-standard-recomendations", 
            "text": "", 
            "title": "PSR - PHP Standard Recomendations"
        }, 
        {
            "location": "/psr/psr/#psr-1-padrao-de-codificacao-basico", 
            "text": "Esta se\u00e7\u00e3o do padr\u00e3o compreende o que deve ser considerado padr\u00e3o de elementos de c\u00f3digo que\ns\u00e3o necess\u00e1rios para garantir um alto n\u00edvel de interoperabilidade t\u00e9cnica entre c\u00f3digo PHP\ncompartilhado.", 
            "title": "PSR 1 - Padr\u00e3o de codifica\u00e7\u00e3o B\u00e1sico"
        }, 
        {
            "location": "/psr/psr/#1-visao-geral", 
            "text": "Arquivos  DEVEM  usar apenas tags  ?php  e  ?= ;    Arquivos  DEVEM  usar apenas  UTF-8  sem  BOM  para o c\u00f3digo PHP;    Arquivos  DEVERIAM  declarar ou s\u00edmbolos (classes, fun\u00e7\u00f5es, constantes, etc) ou causar efeitos\ncolaterais (ex. gerar sa\u00edda, modificar confirma\u00e7\u00f5es do php.ini, etc) mas  N\u00c3O DEVERIAM  fazer\nambos;    Namespaces e classes  DEVEM  seguir o padr\u00e3o de autoloading [PSR4];    Nomes de classes  DEVEM  ser declarados em  StudlyCaps ;        // nome de classe v\u00e1lido\n    class ActiveDirectory\n    {\n    }\n\n    // nome de classe inv\u00e1lido\n    class activeDirectory\n    {\n    }\n\n    // nome de classe inv\u00e1lido\n    class Active_Directory\n    {\n    }   Constantes de classes  DEVEM  ser declaradas em  upper case  com separadores  underscore ;       class ActiveDirectory\n    {\n        // constante v\u00e1lida\n        const SERVER_ADDRESS = '192.168.0.1';\n\n        // constante inv\u00e1lida\n        const serverAddress = '...';\n\n        // constante inv\u00e1lida\n        const server_address = '...';\n    }   Nomes de m\u00e9todos devem ser declarados em  camelCase ;       class ActiveDirectory\n    {\n        // nome de m\u00e9todo v\u00e1lido\n        public function connectAgain(){}\n\n        // nome de m\u00e9todo inv\u00e1lido\n        public function ConnectAgain(){}\n\n        // nome de m\u00e9todo inv\u00e1lido\n        public function Connect_Again(){}\n    }", 
            "title": "1. VIS\u00c3O GERAL"
        }, 
        {
            "location": "/psr/psr/#2-arquivos", 
            "text": "", 
            "title": "2. ARQUIVOS"
        }, 
        {
            "location": "/psr/psr/#21-tags-php", 
            "text": "C\u00f3digo PHP  DEVE  usar tags completas  ?php ?  ou as tags simplificadas  ?= ? ; ele N\u00c3O DEVE  usar outras varia\u00e7\u00f5es de tags.", 
            "title": "2.1 Tags PHP"
        }, 
        {
            "location": "/psr/psr/#22-codificacao-de-caracteres", 
            "text": "C\u00f3digo PHP  DEVE  usar apenas caracteres  UTF-8  sem  BOM .", 
            "title": "2.2 Codifica\u00e7\u00e3o de caracteres"
        }, 
        {
            "location": "/psr/psr/#23-efeitos-colaterais", 
            "text": "Um arquivo  DEVERIA  declarar novos s\u00edmbolos (classes, fun\u00e7\u00f5es, constantes, etc.) e n\u00e3o causar\noutro efeito colateral, ou ele  DEVERIA  executar l\u00f3gica com efeitos colaterais, mas N\u00c3O DEVERIA  realizar ambos.  A frase  \"efeitos colaterais\"  significa a execu\u00e7\u00e3o de l\u00f3gica n\u00e3o diretamente relacionada \u00e0\ndeclara\u00e7\u00e3o de classes, fun\u00e7\u00f5es, constantes, etc., meramente a partir da inclus\u00e3o do arquivo.  \"Efeitos colaterais\"  incluem mas n\u00e3o se limitam h\u00e1: gerar sa\u00edda, explicitamente usar  include \nou  require , conectar a servi\u00e7os externos, modificar configura\u00e7\u00f5es do  php.ini , emitir erros\nou exce\u00e7\u00f5es, modificar vari\u00e1veis est\u00e1ticas ou globais, ler ou escrever em um arquivo, etc.  Os seguintes exemplos mostram um arquivo com ambas as declare\u00e7\u00f5es e efeitos colaterais; i.e, um\nexemplo do que evitar:      // efeito colateral: modificar configura\u00e7\u00f5es do php.ini\n    ini_set('error_reporting', E_ALL);\n\n    // efeito colateral: carregar um arquivo\n    include  file.php ;\n\n    // efeito colateral: gerar uma sa\u00edda\n    echo  html \\n ;\n\n    // declara\u00e7\u00e3o\n    function foo()\n    {\n        // corpo da fun\u00e7\u00e3o\n    }  A seguir um exemplo de um arquivo que cont\u00e9m declara\u00e7\u00f5es sem efeitos colaterais; i.e., um exemplo\ndo que fazer:  ?php\n// declara\u00e7\u00e3o\nfunction foo()\n{\n    // corpo da fun\u00e7\u00e3o\n}\n\n// declara\u00e7\u00e3o condicional *n\u00e3o* \u00e9 efeito lateral\nif (! function_exists('bar')) {\n\n    function bar()\n    {\n        // corpo da fun\u00e7\u00e3o\n    }\n}", 
            "title": "2.3 Efeitos Colaterais"
        }, 
        {
            "location": "/psr/psr/#3-namespace-e-nomes-de-classes", 
            "text": "Namespaces e classes  DEVEM  seguir um padr\u00e3o de autoloading PSR: [PSR-0, PSR-4].  Isto siginifica que cada classe est\u00e1 em um arquivo pr\u00f3prio, e est\u00e1 num namespace de ao menos um\nn\u00edvel: o n\u00edvel superior do nome do distribuidor.  Nomes de classes  DEVEM  ser declarados no formato  StudlyCaps .  C\u00f3digos escritos para PHP 5.3 e superior  DEVEM  usar namespaces formais.  Por exemplo:  ?php\n// PHP 5.3 ou superior\nnamespace Vendor\\Model;\n\nClass Foo\n{\n\n}  C\u00f3digos escritos para PHP 5.2.x e anterior  DEVERIAM  usar uma conven\u00e7\u00e3o de de pseudo-namespaces\nde  \"Vendor_\"  nos nomes das classes:  ?php\n// PHP 5.2.x ou anterior\nclass Vendor_Model_Foo\n{\n\n}", 
            "title": "3. Namespace e nomes de classes"
        }, 
        {
            "location": "/psr/psr/#4-constantes-de-classes-propriedades-e-metodos", 
            "text": "O Termo \"classe\" se refere a todas as classes, interfaces e tra\u00e7os.", 
            "title": "4. Constantes de classes, Propriedades e M\u00e9todos"
        }, 
        {
            "location": "/psr/psr/#41-constantes", 
            "text": "Constantes de classes  DEVEM  ser declaradas todas em  UPPER CASE  com separadores underscore.\nPor exemplo:  ?php\n\nnamespace Vendor\\Model;\n\nclass Foo\n{\n    const VERSION = '1.0';\n    const DATE_APPROVED = '2012-06-01';\n}", 
            "title": "4.1 Constantes"
        }, 
        {
            "location": "/psr/psr/#42-propriedades", 
            "text": "Este guia intencionamento evita qualquer recomenda\u00e7\u00e3o a cerca do uso de nomes de propriedades $StudlyCaps ,  $camelCase , ou  $under_score .  Qualquer conven\u00e7\u00e3o de nome que for usada  DEVERIA  ser aplicada consistentemente dentro de um\nescopo razo\u00e1vel. Este escopo pode ser o n\u00edvel do distribuidor, o n\u00edvel do pacote, o n\u00edvel da classe,\nou o escopo do m\u00e9todo.", 
            "title": "4.2 Propriedades"
        }, 
        {
            "location": "/psr/psr/#43-metodos", 
            "text": "Nomes de m\u00e9todos  DEVEM  ser declarados em  camelCase() .", 
            "title": "4.3 M\u00e9todos"
        }, 
        {
            "location": "/psr/psr/#psr-2-guia-de-estilo-de-codificacao", 
            "text": "", 
            "title": "PSR 2 - Guia de Estilo de Codifica\u00e7\u00e3o"
        }, 
        {
            "location": "/psr/psr/#psr-3-interface-de-log", 
            "text": "", 
            "title": "PSR 3 - Interface de Log"
        }, 
        {
            "location": "/psr/psr/#psr-4-padrao-de-autocarregamento", 
            "text": "", 
            "title": "PSR 4 - Padr\u00e3o de autocarregamento"
        }, 
        {
            "location": "/psr/psr/#psr-6-inteface-de-cache", 
            "text": "", 
            "title": "PSR 6 - Inteface de Cache"
        }, 
        {
            "location": "/psr/psr/#psr-7-inteface-de-mensagem-http", 
            "text": "", 
            "title": "PSR 7 - Inteface de mensagem HTTP"
        }
    ]
}